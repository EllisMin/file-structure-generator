{"version":3,"sources":["components/Button/index.jsx","components/FormInput/index.jsx","components/Form/index.jsx","components/MainCard/index.jsx","components/Result/index.jsx","components/App/index.jsx","index.js"],"names":["Button","children","className","others","FormInput","label","child","childCount","handleAddChild","handleAddSubChild","lastChild","handleRemove","otherProps","marginLeft","level","style","type","onClick","e","preventDefault","addSubChild","name","removeChild","newChild","value","subChildren","addChild","Form","handleReset","handleSort","elements","renderHelper","handleInputChange","forEach","i","push","key","onChange","length","reset","sort","MainCard","Result","handleFontType","fontType","useState","copySuccess","setCopySuccess","textRef","useRef","rootText","newChildren","traverse","list","resList","extraText","text","slice","document","queryCommandSupported","selection","range","body","createTextRange","movetoElementText","current","select","execCommand","window","getSelection","createRange","selectNode","removeAllRanges","addRange","removeRange","checked","offColor","onColor","onHandleColor","uncheckedIcon","checkedIcon","handleDiameter","height","width","ref","rootInput","App","setChildren","setChildCount","setFontType","updatedChildren","curChild","max","thChild","parseInt","charAt","Math","newSubChild","updatedChild","findSubChild","includes","inputChangeHelper","val","target","childName","removeHelper","splice","updated","sortHelper","a","b","substr","localeCompare","unshift","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.05c5284f.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./styles.scss\";\n\nconst Button = ({ children, className, ...others }) => {\n  return (\n    <button className={`${className ? className : \"\"} btn-custom`} {...others}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"../Button\";\n\nimport \"./styles.scss\";\n\nconst FormInput = ({\n  label,\n  child,\n  childCount,\n  handleAddChild,\n  handleAddSubChild,\n  lastChild,\n  handleRemove,\n  ...otherProps\n}) => {\n  const addChild = e => {\n    e.preventDefault();\n    const newChild = {\n      name: `child-${childCount + 1}`,\n      level: child.level,\n      value: \"\",\n      subChildren: []\n    };\n    handleAddChild(newChild);\n  };\n\n  const addSubChild = e => {\n    e.preventDefault();\n    handleAddSubChild(child);\n  };\n\n  const removeChild = e => {\n    e.preventDefault();\n    handleRemove(child.name);\n  };\n\n  const marginLeft = child ? `${child.level * 13}px` : `0.5rem`;\n\n  return (\n    <div className=\"form-group\" style={{ marginLeft: marginLeft }}>\n      <label>{label}</label>\n      <input type=\"text\" {...otherProps} />\n      <div className=\"btn-container\">\n        {label !== \"root\" && (\n          <>\n            <Button onClick={e => addSubChild(e)}>â†“</Button>\n            {label !== \"child-1\" && (\n              <Button className=\"btn-delete\" onClick={e => removeChild(e)}>\n                -\n              </Button>\n            )}\n            {lastChild && (\n              <Button className=\"btn-add\" onClick={e => addChild(e)}>\n                +\n              </Button>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FormInput;\n","import React from \"react\";\nimport FormInput from \"../FormInput\";\nimport Button from \"../Button\";\n\nimport \"./styles.scss\";\n\n// Render sub children recursively\nconst renderHelper = (elements, children, otherProps) => {\n  const {\n    childCount,\n    handleAddChild,\n    handleAddSubChild,\n    handleInputChange,\n    handleRemove\n  } = otherProps;\n  children.forEach((child, i) => {\n    elements.push(\n      <FormInput\n        key={child.name}\n        value={child.value}\n        child={child}\n        childCount={childCount}\n        label={child.name}\n        handleAddChild={handleAddChild}\n        handleAddSubChild={handleAddSubChild}\n        onChange={e => handleInputChange(e, child.name)}\n        handleRemove={handleRemove}\n        lastChild={children.length - 1 === i && child.level === 1}\n      />\n    );\n    if (child.subChildren.length > 0) {\n      renderHelper(elements, child.subChildren, otherProps);\n    }\n  });\n  return elements;\n};\n\nconst Form = ({ handleReset, handleSort, children, ...otherProps }) => {\n  const elements = renderHelper([], children, otherProps);\n\n  const reset = e => {\n    e.preventDefault();\n    handleReset();\n  };\n\n  const sort = e => {\n    e.preventDefault();\n    handleSort();\n  };\n\n  return (\n    <form className=\"main-form\">\n      <div className=\"btn-container\">\n        <Button onClick={e => reset(e)}>Reset</Button>\n        <Button onClick={e => sort(e)}>Sort A-Z</Button>\n      </div>\n      {elements}\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport Form from \"../Form\";\n\nimport \"./styles.scss\";\n\nconst MainCard = ({\n  children,\n  childCount,\n  handleAddChild,\n  handleAddSubChild,\n  handleReset,\n  handleInputChange,\n  handleRemove,\n  handleSort\n}) => {\n  return (\n    <div className=\"main-card\">\n      <h2>Text File Structure Generator</h2>\n      <hr />\n      <main>\n        <Form\n          children={children}\n          childCount={childCount}\n          handleAddChild={handleAddChild}\n          handleAddSubChild={handleAddSubChild}\n          handleReset={handleReset}\n          handleInputChange={handleInputChange}\n          handleRemove={handleRemove}\n          handleSort={handleSort}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default MainCard;\n","import React, { useState, useRef } from \"react\";\nimport Switch from \"react-switch\";\nimport Button from \"../Button\";\nimport \"./styles.scss\";\n\nconst traverse = (list, resList, extraText, fontType) => {\n  let lastChild = false;\n  for (let i = 0; i < list.length; i++) {\n    const child = list[i];\n    lastChild = list.length - 1 === i;\n    if (!lastChild) {\n      if (fontType === 1) {\n        resList.push(\n          <pre\n            key={child.name}\n            className=\"result-text\"\n          >{`${extraText}â”œâ”€â”€ ${child.value}`}</pre>\n        );\n      } else {\n        resList.push(\n          <pre\n            key={child.name}\n            className=\"result-text\"\n          >{`${extraText}â”œâ”€ ${child.value}`}</pre>\n        );\n      }\n    } else {\n      if (fontType === 1) {\n        resList.push(\n          <pre\n            key={child.name}\n            className=\"result-text\"\n          >{`${extraText}â””â”€â”€ ${child.value}`}</pre>\n        );\n      } else {\n        resList.push(\n          <pre\n            key={child.name}\n            className=\"result-text\"\n          >{`${extraText}â””â”€ ${child.value}`}</pre>\n        );\n      }\n    }\n    if (child.subChildren.length > 0) {\n      let text = \"\";\n      if (lastChild) {\n        if (fontType === 1) {\n          text = extraText + \"    \";\n        } else {\n          text = extraText + \"        \";\n        }\n      } else {\n        if (fontType === 1) {\n          text = extraText + \"|   \";\n        } else {\n          text = extraText + \" |      \";\n        }\n      }\n      traverse(child.subChildren, resList, text, fontType);\n    }\n  }\n  return resList;\n};\n\nconst Result = ({ children, handleFontType, fontType }) => {\n  const [copySuccess, setCopySuccess] = useState(\"\");\n  const textRef = useRef(null);\n  const rootText = children[0].value;\n  let newChildren = [...children];\n  newChildren = newChildren.slice(1);\n  const elements = traverse(newChildren, [], \"\", fontType);\n\n  const copyToClipboard = e => {\n    // IE\n    if (document.selection) {\n      const range = document.body.createTextRange();\n      range.movetoElementText(textRef.current);\n      range.select();\n      document.execCommand(\"copy\");\n    } else if (window.getSelection) {\n      var range = document.createRange();\n      range.selectNode(textRef.current);\n      window.getSelection().removeAllRanges();\n      window.getSelection().addRange(range);\n      document.execCommand(\"copy\");\n\n      window.getSelection().removeRange(range); // Unselect\n    }\n    setCopySuccess(\"Copied!\");\n  };\n\n  return (\n    <div className={`${fontType === 1 ? \"font-1\" : \"font-2\"} result`}>\n      <div className=\"result-header\">\n        {/* Display copy btn if command exists */}\n        {document.queryCommandSupported(\"copy\") && (\n          <div className=\"\">\n            <Button onClick={copyToClipboard}>Copy</Button>\n            {copySuccess}\n          </div>\n        )}\n        <label>\n          <span>Font Type</span>\n          <Switch\n            onChange={handleFontType}\n            checked={fontType === 1 ? false : true}\n            offColor=\"#ccc\"\n            onColor=\"#4a4a4a\"\n            onHandleColor=\"#eee\"\n            uncheckedIcon={false}\n            checkedIcon={false}\n            handleDiameter={21}\n            height={23}\n            width={40}\n          />\n        </label>\n      </div>\n      <div className=\"texts\" ref={textRef}>\n        <pre className=\"result-text\">{rootText}</pre>\n        {elements}\n      </div>\n    </div>\n  );\n};\n\nexport default Result;\n","import React, { useState } from \"react\";\nimport MainCard from \"../MainCard\";\nimport Result from \"../Result\";\n\nimport \"./styles.scss\";\n\nconst rootInput = {\n  name: \"root\",\n  level: 0,\n  value: \".\",\n  subChildren: []\n};\n\nconst child = {\n  name: \"child-1\",\n  level: 1,\n  value: \"\",\n  subChildren: []\n};\n\n// Find sub child recursive and replace with updated child\nconst findSubChild = (list, updatedChild) => {\n  for (let i = 0; i < list.length; i++) {\n    const child = list[i];\n    if (child.name === updatedChild.name) {\n      list[i] = updatedChild;\n    } else if (\n      child.subChildren.length > 0 &&\n      updatedChild.name.includes(child.name)\n    ) {\n      findSubChild(child.subChildren, updatedChild);\n    }\n  }\n  return list;\n};\n\nconst inputChangeHelper = (list, key, val) => {\n  for (let i = 0; i < list.length; i++) {\n    const child = list[i];\n    if (child.name === key) {\n      list[i].value = val;\n    } else if (child.subChildren.length > 0 && key.includes(child.name)) {\n      inputChangeHelper(child.subChildren, key, val);\n    }\n  }\n  return list;\n};\n\nconst removeHelper = (list, childName) => {\n  for (let i = 0; i < list.length; i++) {\n    const child = list[i];\n    if (child.name === childName) {\n      list.splice(i, 1);\n    }\n    if (child.subChildren.length > 0 && childName.includes(child.name)) {\n      removeHelper(child.subChildren, childName);\n    }\n  }\n  return list;\n};\n\nconst sortHelper = list => {\n  list.sort((a, b) => {\n    // Ignore .\n    if (a.value.charAt(0) === \".\" && a.value.length > 1) {\n      return a.value.substr(1).localeCompare(b.value);\n    } else if (b.value.charAt(0) === \".\" && b.value.length > 1) {\n      return a.value.localeCompare(b.value.substr(1));\n    } else {\n      return a.value.localeCompare(b.value);\n    }\n  });\n\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].subChildren.length > 0) {\n      sortHelper(list[i].subChildren);\n    }\n  }\n  return list;\n};\n\nconst App = () => {\n  const [children, setChildren] = useState([rootInput, child]);\n  const [childCount, setChildCount] = useState(1);\n  const [fontType, setFontType] = useState(1);\n\n  const handleAddChild = newChild => {\n    const updatedChildren = [...children, newChild];\n    setChildren(updatedChildren);\n    setChildCount(childCount + 1);\n  };\n\n  const handleReset = () => {\n    rootInput[\"value\"] = \".\";\n    rootInput[\"subChildren\"] = [];\n    child[\"value\"] = \"\";\n    child[\"subChildren\"] = [];\n    setChildCount(1);\n    setChildren([rootInput, child]);\n  };\n\n  const handleInputChange = (e, key) => {\n    const updatedChildren = inputChangeHelper(\n      [...children],\n      key,\n      e.target.value\n    );\n    setChildren(updatedChildren);\n  };\n\n  const handleFontType = () => {\n    if (fontType === 1) {\n      setFontType(2);\n    } else {\n      setFontType(1);\n    }\n  };\n\n  const handleAddSubChild = curChild => {\n    const subChildren = [...curChild.subChildren];\n    let max = 0;\n    for (let i = 0; i < subChildren.length; i++) {\n      const name = subChildren[i].name;\n      const thChild = parseInt(name.charAt(name.length - 1));\n      max = Math.max(max, thChild);\n    }\n\n    const newSubChild = {\n      name: `${curChild.name}-${max + 1}`,\n      level: curChild.level + 1,\n      value: \"\",\n      subChildren: []\n    };\n    subChildren.push(newSubChild);\n    const updatedChild = {\n      ...curChild,\n      subChildren: subChildren\n    };\n    const updatedChildren = findSubChild([...children], updatedChild);\n    setChildren(updatedChildren);\n  };\n\n  const handleRemove = childName => {\n    const updatedChildren = removeHelper([...children], childName);\n    setChildren(updatedChildren);\n  };\n\n  const handleSort = () => {\n    const rootInput = children[0];\n    const updated = sortHelper([...children].slice(1));\n    updated.unshift(rootInput);\n    setChildren(updated);\n  };\n\n  return (\n    <div className=\"App\">\n      <MainCard\n        children={children}\n        handleAddChild={handleAddChild}\n        handleAddSubChild={handleAddSubChild}\n        handleReset={handleReset}\n        handleInputChange={handleInputChange}\n        handleRemove={handleRemove}\n        handleSort={handleSort}\n        childCount={childCount}\n      />\n      <Result\n        children={children}\n        fontType={fontType}\n        handleFontType={handleFontType}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}